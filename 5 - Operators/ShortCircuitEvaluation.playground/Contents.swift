import UIKit

/*:
 # Short-circuit Evaluation
 */
//스위프트가 조건식을 평가하는 방법
//false && 첫번쩨 피연산자가 팔스면 두번쨰 피연산자의 결과값에 관계 없이 항상 팔스로 평가됩니다.
//true || 첫번째 피연산자가 트루이면 두번째 피연산자의 결과값에 관계 없이 항상 트루로 평가됩니다.
//논리연산자들은 결과도출에 필요한 최소한의 논리식 만 평가합니다. 이런 평가 방식을 단락평가라고 합니다.
var a = 1
var b = 1

func updateLeft() -> Bool {
    a += 1
    return true
}
//이 함수는 a 의 값을 1증가 시키고 트루를 리턴합니다.
func updateRight() -> Bool {
    b += 1
    return true
}
b



if updateLeft() && updateRight() {
    //if 문이 실행됬을때 updateLeft 가 먼저 실행 되고 그값만 계산한후 트루나 팔스를 리턴한다
}
a
b
// a는 1증가한 2로 표시되지만 b는 증가 하지 않은 원래값이 표시됩니다.이렇게 동작하는 이유는 단락 평가때문 입니다. 스위프트는  논리식을 평가할때 결과를 얻는데 필요한 최소한의 코드만 실행 합니다.
//대충 이해해 보자면 ;;ㅜ  이해가 잘가지는 않는데 if updateLeft() || updateRight() 를 실행시키는데 필요한 값만 계산한다는 것임 Or연산자에선 앞에 하나만 트루 이면 뒤에 있는 친구는 계산 할 필요 없다는거지 결과론 적으로 a의 값을 팔스로 바꾸면 b가 2로 출력 되는것을 볼수 있음 연습으로 && 앤드 연산자를 썼을 때는 a 값이 팔스라면 뒤에것은 계산 하지 않고 똑같이 앞에 값만 계산하는 모습을 볼수있었음 a의 값에 트루를 줄경우 b의 값이 2가 되어 두부분 모두를 계산 하였음 계산 하는데 필요한 최소 하는 값만 계산한다는 소리임 평가하는데 필요한 최소한의 계산 식만 보고 뒤에거는 잘라버리는 것지 이게 단락평가란 것임.
//논리연산자들은 결과도출에 필요한 최소한의 논리식 만 평가합니다. 이런 평가 방식을 단락평가라고 합니다.
var c = 1
var d = 1

func update1() -> Bool {
    c += 1
    return true
}

func update2() -> Bool {
    d += 1
    return true
}
let resultA = update1()
let resultB = update2()
//SideEffect
//우리말로는 부작용으로 번역이 됨 우리가 일상생활에서 부작용이랑의 단어를 쓸때는 부정적으로 쓰지만 프로그램에서는 부정적인 의미는 아닙니다 프로그래밍에서 부작용 사이드 이펙트는 코드의 실행 결과로 인해서 값 또는 상태가 변경 되는겁니다.이코드를 실행하면 a가 2로 바뀌고 b는 그대로 유지가 되죠? 값이 한번만 바꿔었죠 그래서 이코드에서는 한번의 사이드 이펙트가 발생합니다.여기에서 a를 바꿨기 떄문이죠. 아래의 코드 a,b를 단순하게 적어놓은 코드를 보았을 떄 이코드는 단순하게 저장된 코드를 출력만 하는거지 값을 바꾸는건 아닙니다 그래서 여기에서는 사이드 이펙트가 발생하지 않습니다.사이드 이펙트를 고려하지 않고 코드를 작성하면 의도 와는 다른 결과를 얻기 쉽습니다. 사이드 이펙트는 언제나 예측가능한 범위 내에 있어야 하고 우리가 의도한 결과를 도출해야 됩니다.updateLeft가 호출되면 반드시 updateRight 도 호출되어야 합니다.그런데 if updateLeft() && updateRight() { 이코드는  updateLeft가 리턴하는 값에 따라서 updateRight가 호출 되지 않을수도 있습니다.코드를 보면 사이드이펙트를 발생시키는 코드가 논리식 안에 포함 되어 있습니다 . 이렇게 하면 논리적인 오류가 발생할 확률이 상당히 높습니다.논리연산자로 조건을 평가하기 전에 결과를 미리 도출해놓으면 미리 방지할수 있습니다.

a
b

if resultA && resultB {
    //if 문이 실행됬을때 updateLeft 가 먼저 실행 되고 그값만 계산한후 트루나 팔스를 리턴한다
}
c
d
//이렇게 논리식을 작성할떄는 사이드 이펙트가 발생하는 코드는 이전으로 뺴는것이 좋습니다.

//논리식에서 결과를 도출하는데 필요한 최소한의 코드만 실행하는 것을 단락 평가라고 합니다.
//그리고 표현식을 평가 했을떄 값이 변경되거나 상태가 변경되는 것을 사이드 이펙트라고 합니다.
//논리식에 사이드 이펙트를 발생시킬수 있는 코드가 포함되어 있으면 논리적인 오류가 발생할 가능성이 높아지기 떄문에 조심해야 됩니다.
var sideEffect = 50
var sidedenser = 50

func Effect() -> Bool {
    sideEffect -= 19
    return true
}
func side() -> Bool {
    sidedenser += 19
    return true
}
let callect = Effect()
let denser = side()

if callect || denser {

}

sideEffect
sidedenser
//두개의 값을 다 변경하려면 이름이 많이 필요하겠군 풍풍 ㅜㅜ






